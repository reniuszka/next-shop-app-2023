import React from "react";
import { InferGetStaticPropsType } from "next";
import { ProductDetails } from "../components/Product";
import { ProductListItem } from "../components/Product";
//jesli jestem na stronie i click prawym i view source code widze ze dane sa wygenerowane, przy CSR bylby tyllko div z classa app

// Zakładka Elements wyświetla nam kod (DOM), który został wyrenderowany przez klienta – czyli najpierw zwrócony z serwera, a potem zmodyfikowany przez JavaScript.

// Natomiast otwarcie "View Page Source" powoduje wyświetlenie kodu w takiej postaci, w jakiej dostarczył go nam serwer – bez zmian w JS.
const ProductsPage = ({
  data,
}: InferGetStaticPropsType<typeof getStaticProps>) => {
  // console.log("data from props:", data);
  return (
    <ul className="grid gap-12 grid-cols-1 sm:grid-cols-2 md:grid-cols-3 m-12">
      {data.map((product) => {
        return (
          <li key={product.id} className="shadow-xl border-2">
            <ProductListItem
              data={{
                id: product.id,
                title: product.title,
                thumbnailAlt: product.title,
                thumbnailUrl: product.image,
              }}
            />
            {/* mielismy inne nazwy pol */}
            {/* <ProductDetails
              data={{
                title: product.title,
                description: product.description,
                thumbnailUrl: product.image,
                thumbnailAlt: product.title,
                rating: product.rating.rate,
              }}
            /> */}
          </li>
        );
      })}
    </ul>
  );
};

//SSG - dane sa generowane za wczasu, ta fcja wykona sie tylko raz w trakcie buildowania aplikacji w trakcie wrzucenia jej na serwer (produkcje) -> yarn build i jak otwaorzymy apke yarn start i wejdziemy na /products to w network w fetch/XHR nie ma zapytania do serwera fakeAPI bo w trakcie buildowania to poszlo ten request, wykonany raz, ta fcja zostala wyrzucona z builda bo wykonala swoje zadanie i component zostal wygenerowany
export const getStaticProps = async () => {
  const res = await fetch("https://fakestoreapi.com/products");
  const data: StoreApiResponse[] = await res.json();
  // console.log("daaaata", data);

  return {
    props: {
      data,
    },
  };
};

// Generated by https://quicktype.io
interface StoreApiResponse {
  id: number;
  title: string;
  price: number;
  description: string;
  category: string;
  image: string;
  rating: {
    rate: number;
    count: number;
  };
}

export default ProductsPage;

// InferGetStaticPropsType jest typem dostarczanym przez Nexta. Dzięki niemu, kod w naszej aplikacji będzie spójny, a my nie musimy w dwóch miejscach deklarować kształtu danych. mowimy zainfereuj ksztalt propsow z getStaticProps
// const Ssg_ProductsPage = ({
//   data,
// }: InferGetStaticPropsType<typeof getStaticProps>) => {
//   console.log("data", data);
//   return <div>{data[0].rating}</div>;
// };
//ssg (static site generation)- pobranie za wczasu, by uzyc to na poziomie tej strony uzywamy getStaticProps

//metoda do generowania ssg by next - ta strona dostanie propsy w sposob statycznym
// const getStatic Props wykona sie w czasie budowania aplikacji, te dane sa zwrocone z funkcji i te dane sa zaposrednictwem next przechowywane i w momencie gdy my odwiedzimy tą strone to sa  przekazane to ssg_productsPage a getStaticProps zostanie usuniete przez next automatycznie i tylko jej dzialanie bedzie dostepne
// const getStaticProps = async () => {
//   //fetch obiecuje ze dane kiedys przyjda z jakiegos serwera i na te dane czekam( a nie wiem czy one przyjda czy nie)
//   const response = await fetch("https://fakestoreapi.com/products/");
//   //chcemy powiedziec w jakies formacie chcemy dane i narzucamy typ danych StoreApiResponse i to bedzie tablica
//   const data: StoreApiResponse[] = await response.json();
//   console.log("daaaata", data);
//   // .then((res) => res.json())
//   // .then((json) => console.log(json));

//   // i zwracamy props (obiekt) ktore beda przekazane do strony wyzej
//   return {
//     props: {
//       data,
//     },
//   };
// };
